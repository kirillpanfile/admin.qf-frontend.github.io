{"version":3,"file":"js/685.98d9d641.js","mappings":"ihBAyCA,MAAM,OAAEA,IAAWC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,QAClB,MAAEC,IAAUF,EAAAA,EAAAA,KAAKG,EAAAA,EAAAA,QACjB,WAAEC,EAAF,WAAcC,EAAd,WAA0BC,IAAeH,EAAAA,EAAAA,OAExCI,EAAUC,EAAWC,IAAYC,EAAAA,EAAAA,IAAW,CAAC,KAAM,KAAM,KAE1DC,GAAQC,EAAAA,EAAAA,KAAS,IACZL,EAASM,OAASN,EAASM,MAAMC,OAAO,GAAGC,cAAgBR,EAASM,MAAMG,MAAM,GAAK,UAG1FC,EAAa,KACfT,EAAUK,MAAMI,cAGdC,EAAc,KAChBV,EAAUK,MAAMI,aACO,WAAnBV,EAASM,OAAoBT,EAAWK,GACrB,SAAnBF,EAASM,QACTJ,EAASU,KAAOpB,EAAOc,MAAMO,MAAMC,GAASA,EAAKC,MAAQb,EAASU,KAAKG,MACvEjB,EAAWI,EAASa,IAAKb,KAI3Bc,EAAQC,IACV,MAAM,KAAEC,EAAF,KAAQC,GAASF,EAEvB,IAAK,CAAC,SAAU,QAAQG,SAASF,GAAO,MAAM,IAAIG,MAAM,gBAMxD,GAJa,WAATH,IACAI,OAAOC,OAAOrB,EAAU,CAAEE,MAAO,GAAIoB,YAAa,GAAIZ,KAAM,CAAEG,IAAK,IAAMU,KAAM,GAAIC,OAAQ,UAC3F1B,EAASM,MAAQ,UAER,SAATY,EAAiB,CACjB,IAAKC,EAAM,MAAM,IAAIE,MAAM,gBAC3BrB,EAASM,MAAQ,OACjBgB,OAAOC,OAAOrB,EAAUiB,GAG5BlB,EAAUK,MAAMqB,a,OAEpBC,EAAa,CAAEZ,S,67CC9ETa,EAAc,EAEpB","sources":["webpack://qf-frontend/./src/components/UI/modals/TaskModal.vue","webpack://qf-frontend/./src/components/UI/modals/TaskModal.vue?f604"],"sourcesContent":["<template>\r\n    <app-modal ref=\"taskModal\" :title=\"title\" :titleInput=\"false\">\r\n        <div class=\"grid grid-cols-6 gap-x-6\">\r\n            <div class=\"col-span-6\">\r\n                <VInput v-model=\"taskData.title\" size=\"lg\" placeholder=\"Task Title\" name=\"taskTitle\" label=\"Title\" />\r\n            </div>\r\n            <div class=\"col-span-6 mb-4\">\r\n                <VTextarea\r\n                    v-model=\"taskData.description\"\r\n                    size=\"base\"\r\n                    placeholder=\"Task Description\"\r\n                    name=\"taskDescription\"\r\n                    label=\"Description\" />\r\n            </div>\r\n            <div class=\"col-span-6 sm:col-span-3 mb-6\">\r\n                <VSelect v-model=\"taskData.user._id\" :options=\"admins\" name=\"admins\" size=\"base\" label=\"User\" />\r\n            </div>\r\n            <div class=\"col-span-6 sm:col-span-3 mb-6\">\r\n                <VSelect v-model=\"taskData.flag\" :options=\"flags\" name=\"flags\" size=\"base\" label=\"Flag\" />\r\n            </div>\r\n        </div>\r\n        <div class=\"items-center py-6 border-t border-gray-200 rounded-b flex gap-4\">\r\n            <v-button type=\"button\" bgColor=\"default\" size=\"base\" @btnClick=\"submitModal()\"> Submit </v-button>\r\n            <v-button\r\n                type=\"button\"\r\n                v-if=\"taskType === 'view'\"\r\n                bgColor=\"red\"\r\n                size=\"base\"\r\n                @btnClick=\"deleteTask(taskData._id), closeModal()\">\r\n                Delete\r\n            </v-button>\r\n        </div>\r\n    </app-modal>\r\n</template>\r\n\r\n<script setup>\r\nimport { createRefs } from \"@/helpers\"\r\nimport { useAdminStore, useTaskStore, refs } from \"@/store\"\r\nimport { AppModal, VInput, VSelect, VButton, VTextarea } from \"@/components\"\r\nimport { computed } from \"vue\"\r\n\r\nconst { admins } = refs(useAdminStore())\r\nconst { flags } = refs(useTaskStore())\r\nconst { createTask, updateTask, deleteTask } = useTaskStore()\r\n\r\nconst [taskType, taskModal, taskData] = createRefs([null, null, {}])\r\n\r\nconst title = computed(() => {\r\n    return taskType.value && taskType.value.charAt(0).toUpperCase() + taskType.value.slice(1) + \" Task\"\r\n})\r\n\r\nconst closeModal = () => {\r\n    taskModal.value.closeModal()\r\n}\r\n\r\nconst submitModal = () => {\r\n    taskModal.value.closeModal()\r\n    if (taskType.value === \"create\") createTask(taskData)\r\n    if (taskType.value === \"view\") {\r\n        taskData.user = admins.value.find((item) => item._id === taskData.user._id)\r\n        updateTask(taskData._id, taskData)\r\n    }\r\n}\r\n\r\nconst open = (data) => {\r\n    const { type, task } = data\r\n\r\n    if (![\"create\", \"view\"].includes(type)) throw new Error(\"Invalid type\")\r\n\r\n    if (type === \"create\") {\r\n        Object.assign(taskData, { title: \"\", description: \"\", user: { _id: \"\" }, flag: \"\", status: \"To Do\" })\r\n        taskType.value = \"create\"\r\n    }\r\n    if (type === \"view\") {\r\n        if (!task) throw new Error(\"Invalid task\")\r\n        taskType.value = \"view\"\r\n        Object.assign(taskData, task)\r\n    }\r\n\r\n    taskModal.value.openModal()\r\n}\r\ndefineExpose({ open })\r\n</script>\r\n\r\n<style></style>\r\n","import script from \"./TaskModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./TaskModal.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["admins","refs","useAdminStore","flags","useTaskStore","createTask","updateTask","deleteTask","taskType","taskModal","taskData","createRefs","title","computed","value","charAt","toUpperCase","slice","closeModal","submitModal","user","find","item","_id","open","data","type","task","includes","Error","Object","assign","description","flag","status","openModal","expose","__exports__"],"sourceRoot":""}